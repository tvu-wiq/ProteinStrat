--------------------------------------------------------------------------------------------------------------------------------------------------------
/* PROJECT          : Integrated Protein Promo Strategy
    ANALYSIS PERIOD : Past 104 Weeks
    JIRA            : CAT-4992
    CONFLUENCE      : < INSERT LINK >
    STAKEHOLDER     : NGP Team
    OUTPUT          : Switching analysis by poultry promotion
    CREATED BY      : Tom V
    DATE            : 17/10/2022
    REVIEWED BY     : 
    REVIEW DATE     : 
  

*/
---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--STEP 1 : Import SKU list for poultry promotion

--Protein list from Yuting and NGP, created during Dendrogram work: gcp-wow-supers-rtla-qtm-dev.202207_Dendrogram_Protein.TREE_input_all

--Get the top promotions to be dialed up provided by NGP

--11 Key poultry promotion

CREATE OR REPLACE TABLE gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Key_Poultry_Promotion_Period AS

SELECT 
  a.ProductNumber
  , a.PETPriceFamily 
  , A.PETPriceFamilyDescription
  , PWStartDate
  , PWEndDate  
  , DATE_ADD(PWStartDate, INTERVAL -7 DAY) AS Pre_PWStartDate
  , DATE_ADD(PWEndDate, INTERVAL -7 DAY) AS Pre_PWEndDate
  , PromotionalDepth
  , SalesDistrict


FROM gcp-wow-ent-im-tbl-prod.adp_quantium_wow_commercials_view.qtm_pet_base_v A

INNER JOIN gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_Raw  B
  ON A.PETPriceFamily = b.PETPriceFamily

WHERE PWStartDate BETWEEN DATE_ADD(DATE'2022-07-29', INTERVAL - (52*2*7-1) DAY) AND DATE'2022-07-29'
  AND a.PromotionFlag = 1

GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9;

--GET article number and subcats for the promotions

CREATE OR REPLACE TABLE gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList AS 

	SELECT
	a.ProductNumber
	, SUBSTRING(a.ProductNumber, 1, length(a.ProductNumber)-3) Article
  , PETPriceFamily 
  , PETPriceFamilyDescription
  , PWStartDate
  , PWEndDate  
  , Pre_PWStartDate
  , Pre_PWEndDate
  , PromotionalDepth
  , SalesDistrict
	,	A.SubCategoryShortDescription AS SUBCATEGORY
  , ROW_NUMBER() OVER () AS Offer_ID

	FROM `gcp-wow-ent-im-tbl-prod.adp_quantium_wow_commercials_view.qtm_product_attributes_v`  A

	INNER JOIN `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Key_Poultry_Promotion_Period` B
		ON A.ProductNumber = B.ProductNumber 

	-- INNER JOIN 	`gcp-wow-ent-im-tbl-prod.adp_dm_masterdata_view.dim_article_hierarchy_v` C
	-- ON CONCAT(C.Article,"-",C.RetailUOM) = A.ProductNumber		

	-- WHERE C.SalesOrg = '1005'

  GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11


--Segment of the 11 promotions

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_Category` as 

SELECT
  A.*
  , B.CATEGORY --this is granular at segment level while called category

FROM (

  SELECT DISTINCT PETPriceFamilyDescription, ARTICLE

  FROM gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList

) A

LEFT JOIN `gcp-wow-supers-rtla-qtm-dev.202207_Dendrogram_Protein.TREE_input_all` B
  ON A.ARTICLE = B.ARTICLE_NBR


-- UNION with other protein skus

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.All_Protein_Skus_With_Promo_dates` AS

	SELECT
		B.PWStartDate
  , B.PWEndDate  
  , B.Pre_PWStartDate
  , B.Pre_PWEndDate
	, B.Offer_ID
	, B.SalesDistrict

	, a.ARTICLE_NBR
	,	A.CATEGORY AS SUBCATEGORY

	FROM `gcp-wow-supers-rtla-qtm-dev.202207_Dendrogram_Protein.TREE_input_all` a

	CROSS JOIN (						--cross join to get the product list for each promotion, unique at offer_id level
			SELECT 
				PWStartDate
				, PWEndDate  
				, Pre_PWStartDate
				, Pre_PWEndDate
				, Offer_ID
				, SalesDistrict
			
			FROM gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList
			
			GROUP BY 1, 2, 3, 4, 5, 6) B

	LEFT JOIN gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList C
		ON B.Offer_ID = C.Offer_ID
		AND A.ARTICLE_NBR = C.ARTICLE

	WHERE C.ARTICLE IS NULL --REMOVE SKUS ON PROMO
	
UNION ALL

	SELECT
		B.PWStartDate
  , B.PWEndDate  
  , B.Pre_PWStartDate
  , B.Pre_PWEndDate
	, B.Offer_ID
	, B.SalesDistrict

	, article as ARTICLE_NBR
	,	CONCAT(PETPriceFamilyDescription, '-On Promo week') AS SUBCATEGORY		 --to mark poultry skus on promotion				
	FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList` B

--check number of skus by offer_id

select 
	offer_id
	, count(distinct ARTICLE_NBR) as sku_count

from gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.All_Protein_Skus_With_Promo_dates

group by 1
;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--STEP 2: customer classfications & spending analysis

--all the metrics calculated at CRN and offer_id level

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume`  AS 

SELECT		M.*
,	Sum (SALES_PRE) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) AS CUST_TOTSALES_PRE_LAUNCH -- partition by launch date since doesn't matter if assortment has same launch date
,	Sum (SALES_POST) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) AS CUST_TOTSALES_POST_LAUNCH
,	CASE WHEN Sum (SALES_PRE) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) = 0 AND Sum (SALES_POST) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) > 0 THEN 'NEW' ---new to FRUIT N VEG universe
				WHEN Sum (SALES_PRE) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) > 0 AND Sum (SALES_POST) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) = 0 THEN 'LAPSED' 
				WHEN Sum (SALES_PRE) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) > 0 AND Sum (SALES_POST) Over (PARTITION BY M.CRN, M.LAUNCH_DATE, m.offer_id) > 0  THEN 'EXISTING' ---existing
				ELSE 'CHECK'
	END  AS CUST_FLAG			
FROM
(
		SELECT ISS.CRN
						,	ASSORT.SUBCATEGORY AS ASSORTMENT
						,	'PROTEIN UNIVERSE' AS PROD_UNIVERSE
						, Offer_ID
						, PWStartDate as LAUNCH_DATE
						, SalesDistrict

						,	Sum(CASE WHEN ISS.START_TXN_DATE BETWEEN Pre_PWStartDate AND Pre_PWEndDate THEN VOLUME ELSE 0 END)  AS SALES_PRE --Keep Sales column name to be fucntional downstream while this is VOLUME
						,	Sum(CASE WHEN ISS.START_TXN_DATE BETWEEN PWStartDate AND PWEndDate THEN VOLUME ELSE 0 END)  AS SALES_POST  --Keep Sales column name to be fucntional downstream while this is VOLUME
		
		FROM   `gcp-wow-supers-rtla-qtm-dev.ETL.ISS`  AS ISS

		INNER JOIN  `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.All_Protein_Skus_With_Promo_dates` AS ASSORT --corrected assortments
				ON ISS.ARTICLE_NBR  = ASSORT.ARTICLE_NBR
				and ISS.DISTRICT_CODE = ASSORT.SalesDistrict					--consider the switching in the state where we have promotion
				AND ISS.START_TXN_DATE BETWEEN ASSORT.Pre_PWStartDate AND ASSORT.PWEndDate
										
		WHERE  1=1 
					AND ISS.DIVISION_NBR = '1005'
					AND TOT_AMT_INCLD_GST > 0
					AND PROD_QTY > 0

		GROUP BY 1,2,3,4, 5, 6
)M
;

--CHECK CUSTOMER DISTRIBUTION

SELECT offer_id, CUST_FLAG, COUNT(DISTINCT CRN)
FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume`
GROUP BY 1, 2
ORDER BY 3 ASC
;

--sample is sufficient, LOWEST SAMPLE SIZE IS 10595

select count(*)
from `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume`
;

--CHECK PERCENTAGE CHANGE IN SALES FROM PRE TO POST

SELECT ASSORTMENT, SUM(SALES_POST) AS POST, SUM(SALES_PRE) AS PRE, SUM(SALES_POST) / SUM(SALES_PRE) - 1 AS PERC_CHANGE
FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume`
GROUP BY 1

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--STEP 3: calculating net switching each product gets from existing customers 

--calculated at CRN and offer_id level
			
CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Data_Volume` AS 
WITH A AS (
	SELECT			
		CRN
		, ASSORTMENT
		, LAUNCH_DATE
		, Offer_id
		, SALES_POST - SALES_PRE AS CUST_PROD_CHANGE ----use cast to ensure no rounding errors 	--change from pre to post of the sub-cat
		, Sum(SALES_POST - SALES_PRE) Over (PARTITION BY CRN, LAUNCH_DATE, Offer_id) AS CUST_CHANGE					--change from pre to post at customer level
		, CASE WHEN (SALES_POST - SALES_PRE) * Sum(SALES_POST - SALES_PRE) Over (PARTITION BY CRN, LAUNCH_DATE, Offer_id) > 0 THEN 1 ELSE 0 END AS CUST_PROD_CHANGE_SAMEDIRECTION
										
	FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume` 				
	WHERE CUST_FLAG='EXISTING'   -- switching is considered only for existing shoppers
), B AS (
	SELECT
		A.*
		, Sum(CUST_PROD_CHANGE_SAMEDIRECTION * CUST_PROD_CHANGE) Over (PARTITION BY CRN, LAUNCH_DATE, Offer_id) AS CUST_PROD_CHANGE_SAMEDIRECTION_TOTAL		--THIS IS AT CUSTOMER AND offer_id LEVEL
	FROM A
), C AS (
	SELECT 
		B.*
		, CASE 
			WHEN CUST_PROD_CHANGE_SAMEDIRECTION_TOTAL <> 0 THEN 
				CUST_PROD_CHANGE *CUST_PROD_CHANGE_SAMEDIRECTION 		-- Only to product-level changes in the same direction as total customer-level change
				/CUST_PROD_CHANGE_SAMEDIRECTION_TOTAL				-- The above's proportion out of the total customer-level change
				* CUST_CHANGE  																							--	Scale using total customer gains, so that sales due to spending more are obtained for the product
			ELSE 0 END AS CUST_PROD_GAIN
	FROM B
)
, D AS (
	SELECT 
		C.*
		, CUST_PROD_CHANGE - CUST_PROD_GAIN AS CUST_PROD_SWITCH
		
	FROM C
)

SELECT 
	D.*
	, (Sum (Abs (CUST_PROD_SWITCH)) Over (PARTITION BY CRN, LAUNCH_DATE, Offer_id)) / 2 AS CUST_SWITCH --why divide by 2? --its going in/out so divide by 2 (net switching customer) - how much money you switched in universe

FROM D
;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--STEP 4:

--calulating switching sales between poultry promotion sku and other protein segments

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume` AS 

SELECT		C.CRN
				, C.OFFER_ID
				,	C.ASSORTMENT AS Poultry_ASSORTMENT
				,	B.ASSORTMENT AS SWITCHING_ASSORTMENT
				,	C.LAUNCH_DATE
				, c.CUST_PROD_SWITCH as Poultry_CUST_PROD_SWITCH
				, b.CUST_PROD_SWITCH as SWITCHING_CUST_PROD_SWITCH
				, B.CUST_SWITCH
				,	CASE WHEN C.CUST_PROD_SWITCH * B.CUST_PROD_SWITCH < 0 THEN Abs(B.CUST_PROD_SWITCH) * C.CUST_PROD_SWITCH /B.CUST_SWITCH ELSE 0 END AS SWITCHING_IN_SALES --switching from other product to Odd bunch

FROM
			(
			SELECT 
				CRN
			, Offer_id
			,	A.LAUNCH_DATE	
			,	A.ASSORTMENT
			,	Sum(CUST_PROD_SWITCH) AS CUST_PROD_SWITCH
			
		FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Data_Volume` AS A
							
			WHERE 1=1
				AND ASSORTMENT LIKE '%-On Promo week%' --TOP 11 POULTRY PROMOTION
				--AND CRN IN ('9344450420041')        
			GROUP BY 1,2,3, 4
			) C
			
LEFT JOIN

			(
			SELECT 
				CRN
			, offer_id
			,	A.LAUNCH_DATE	
			,	ASSORTMENT
			,	Sum(CUST_PROD_SWITCH) AS CUST_PROD_SWITCH  
			,	Sum(CUST_SWITCH) AS CUST_SWITCH
			
			FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Data_Volume` AS A
  
			WHERE
				1=1
				--AND ASSORTMENT NOT LIKE '%-On Promo week%' --TOP 11 POULTRY PROMOTION
			--AND  CRN IN ('9344450420041') 
			GROUP BY 1,2,3, 4
			) B
	ON  C.CRN = B.CRN
	AND C.ASSORTMENT <> B.ASSORTMENT
	AND C.LAUNCH_DATE= B.LAUNCH_DATE
	AND C.OFFER_ID = B.OFFER_ID
;

--switching by protein type

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume_By_Protein_Type` AS 

SELECT 
	A.*
	, CASE WHEN B.GroupName IS NULL THEN 'Other' ELSE B.GroupName END AS GroupName
	, CASE WHEN B.ProteinGroup IS NULL THEN 'Other' ELSE B.ProteinGroup END AS ProteinGroup
	, CASE WHEN PromotionalDepth IS NULL THEN 0 ELSE PromotionalDepth END AS PromotionalDepth

FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume` A

LEFT JOIN gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.ProteinGrouping B 
	ON A.SWITCHING_ASSORTMENT = B.KEY

LEFT JOIN gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList C
	ON A.OFFER_ID = C.OFFER_ID
;

--switching by protein type --aggregated

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume_By_Protein_Type_Agg` AS 

SELECT 
	Poultry_ASSORTMENT
	, SWITCHING_ASSORTMENT
	,	LAUNCH_DATE AS PW_START_DATE
	
	, CASE WHEN B.GroupName IS NULL THEN 'Other' ELSE B.GroupName END AS GroupName
	, CASE WHEN B.ProteinGroup IS NULL THEN 'Other' ELSE B.ProteinGroup END AS ProteinGroup

	, AVG(CASE WHEN PromotionalDepth IS NULL THEN 0 ELSE PromotionalDepth END) AS PromotionalDepth

	, SUM(SWITCHING_IN_SALES) AS SWITCHING_IN_SALES

FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume` A

LEFT JOIN gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.ProteinGrouping B 
	ON A.SWITCHING_ASSORTMENT = B.KEY

LEFT JOIN gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_ProdList C
	ON A.OFFER_ID = C.OFFER_ID

GROUP BY 1, 2, 3, 4, 5
;

--offer_id level

select LAUNCH_DATE,	Poultry_ASSORTMENT,	SWITCHING_ASSORTMENT, GroupName, ProteinGroup, AVG(PromotionalDepth) AS AveragePromotionalDepth, SUM(SWITCHING_IN_SALES) as SWITCHING_IN_SALES
from gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume_By_Protein_Type
GROUP BY 1, 2, 3, 4, 5
;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--STEP 4.5: Calculate correlation between switching and promotional depth

--correlation with switching from poultry and red meat
--CONCAT(PETPriceFamilyDescription, '-On Promo week') 

WITH BASE AS (

select LAUNCH_DATE,	Poultry_ASSORTMENT, ProteinGroup, AVG(PromotionalDepth) AS AveragePromotionalDepth, SUM(SWITCHING_IN_SALES) as SWITCHING_IN_SALES
	, ROW_NUMBER() OVER (PARTITION BY Poultry_ASSORTMENT, ProteinGroup ORDER BY AVG(PromotionalDepth) DESC) AS  PromotionalDepth_Rank
	, ROW_NUMBER() OVER (PARTITION BY Poultry_ASSORTMENT, ProteinGroup ORDER BY SUM(SWITCHING_IN_SALES) DESC) AS  SWITCHING_IN_SALES_Rank
	, COUNT(*) OVER (PARTITION BY Poultry_ASSORTMENT, ProteinGroup) AS SAMPLE_SIZE

from gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume_By_Protein_Type a

INNER JOIN `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_Category` B
	ON A.Poultry_ASSORTMENT = CONCAT(B.PETPriceFamilyDescription, '-On Promo week') 

GROUP BY 1, 2, 3

)

SELECT 
	Poultry_ASSORTMENT
	, ProteinGroup
	, SAMPLE_SIZE
	, 1- SAFE_DIVIDE(6*SUM(POWER((SWITCHING_IN_SALES_Rank - PromotionalDepth_Rank),2)),(SAMPLE_SIZE*(POWER(SAMPLE_SIZE, 2) - 1))) AS Spearman_Correlation  --Spearman correlation
	, SUM(SWITCHING_IN_SALES) AS SWITCHING_IN_SALES
	, CORR(AveragePromotionalDepth, SWITCHING_IN_SALES) AS CORRELATION
--	, COUNT(DISTINCT LAUNCH_DATE) AS SAMPLE_SIZE_RECALC

FROM BASE

GROUP BY 1, 2, 3;

--GROUP BY POULTRY SEGMENT

WITH BASE AS (

select LAUNCH_DATE, CATEGORY,	Poultry_ASSORTMENT, ProteinGroup, AVG(PromotionalDepth) AS AveragePromotionalDepth, SUM(SWITCHING_IN_SALES) as SWITCHING_IN_SALES
	, ROW_NUMBER() OVER (PARTITION BY CATEGORY, ProteinGroup ORDER BY AVG(PromotionalDepth) DESC) AS  PromotionalDepth_Rank
	, ROW_NUMBER() OVER (PARTITION BY CATEGORY, ProteinGroup ORDER BY SUM(SWITCHING_IN_SALES) DESC) AS  SWITCHING_IN_SALES_Rank
	, COUNT(*) OVER (PARTITION BY CATEGORY, ProteinGroup) AS SAMPLE_SIZE

from gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Sales_Volume_By_Protein_Type a

INNER JOIN `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.KeyPoultryPromotion_Category` B
	ON A.Poultry_ASSORTMENT = CONCAT(B.PETPriceFamilyDescription, '-On Promo week') 

GROUP BY 1, 2, 3, 4

)

SELECT 
	CATEGORY
	, ProteinGroup
	, SAMPLE_SIZE
	, 1- SAFE_DIVIDE(6*SUM(POWER((SWITCHING_IN_SALES_Rank - PromotionalDepth_Rank),2)),(SAMPLE_SIZE*(POWER(SAMPLE_SIZE, 2) - 1))) AS Spearman_Correlation  --Spearman correlation
	, SUM(SWITCHING_IN_SALES) AS SWITCHING_IN_SALES
	, CORR(AveragePromotionalDepth, SWITCHING_IN_SALES) AS CORRELATION
--	, COUNT(DISTINCT LAUNCH_DATE) AS SAMPLE_SIZE_RECALC

FROM BASE

GROUP BY 1, 2, 3
;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--STEP 5: Final Gains & Loss output

CREATE OR REPLACE TABLE `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Output_Volume` AS

SELECT		B.* 
				,	Sum(GAIN_LOSS_NET) Over (PARTITION BY Assortment, offer_id) AS TOTAL_GAIN_LOSS

FROM
(
		SELECT   	'INCREMENTAL DUE TO SPENDING MORE/LESS' AS Source_of_change
							, DAT.Assortment AS Assortment
							, offer_id
							, DAT.LAUNCH_DATE
							, Sum(CUST_PROD_GAIN) AS GAIN_LOSS_NET

		FROM       `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Data_Volume` AS DAT

		WHERE CRN IS NOT NULL
--		WHERE DAT.ASSORTMENT <> 'BTC Total'

		GROUP BY 1,2,3, 4

		UNION ALL

		SELECT   'INCREMENTAL DUE TO NEW CUSTOMERS' AS Source_of_change
							, DAT.Assortment AS Assortment
							, offer_id
							, DAT.LAUNCH_DATE
							, Sum(SALES_POST) - Sum(SALES_PRE) AS GAIN_LOSS_NET
							
		FROM        `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume` AS DAT
		
		WHERE ((CUST_FLAG = 'NEW') OR (CUST_FLAG = 'LAPSED'))
		AND CRN IS NOT NULL
--			AND DAT.ASSORTMENT <> 'Odd bunch'

		GROUP BY 1,2,3, 4

		UNION ALL

		SELECT  'SWITCHING' AS Source_of_change
						 , DAT.Assortment AS Assortment
						 , offer_id
						 , DAT.LAUNCH_DATE
						 ,  Sum(CUST_PROD_SWITCH)  AS GAIN_LOSS_NET
						 
		FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Switching_Data_Volume` AS DAT

		WHERE CRN IS NOT NULL
		
		GROUP BY 1,2,3, 4
		
) B


-- View output

SELECT Assortment
,	Source_of_change
,	LAUNCH_DATE
, offer_id
,	Sum(GAIN_LOSS_NET) AS GAIN_LOST_NET
,	Sum(TOTAL_GAIN_LOSS) AS TOTAL_GAIN_LOSS
FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Output_Volume`
GROUP BY 1,2,3, 4
ORDER BY offer_id, Assortment, Source_of_change

--check On promotion skus

SELECT Assortment
,	Source_of_change
,	LAUNCH_DATE
, offer_id
,	Sum(GAIN_LOSS_NET) AS GAIN_LOST_NET
,	Sum(TOTAL_GAIN_LOSS) AS TOTAL_GAIN_LOSS
FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Output_Volume`
WHERE ASSORTMENT LIKE '%-On Promo week%'
GROUP BY 1,2,3, 4
ORDER BY offer_id, Assortment, Source_of_change
;

--total net gain in the last 2 years
--mainly switching

SELECT Assortment
,	Source_of_change
,	Sum(GAIN_LOSS_NET) AS GAIN_LOST_NET
,	Sum(TOTAL_GAIN_LOSS) AS TOTAL_GAIN_LOSS
, Sum(GAIN_LOSS_NET) / Sum(GAIN_LOSS_NET) as proportion
FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Output_Volume`
WHERE ASSORTMENT LIKE '%-On Promo week%'
GROUP BY 1,2
ORDER BY offer_id, Assortment, Source_of_change
;
-- Check sales post v pre

SELECT
	ASSORTMENT
,	SUM(SALES_PRE) AS SALES_PRE
,	SUM(SALES_POST) AS SALES_POST
FROM `gcp-wow-supers-rtla-qtm-dev.Integrated_Protein_Strategy.Protein_Customer_Data_Volume` 
GROUP BY 1
;

